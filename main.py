# -*- coding: utf-8 -*-
"""alexnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aQDw6yi0kUX4ZlObX7RXxIlTBX3o57js
"""

import torch
import torchvision
import torchvision.transforms as transforms
from torchvision import datasets
import matplotlib.pyplot as plt
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F

device = 'cuda' if torch.cuda.is_available() else 'cpu'

transform = transforms.Compose([
    # transforms.Resize(224),  # Resize to AlexNet input size
    transforms.ToTensor(),   # This converts to (3, 224, 224) format
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                       std=[0.229, 0.224, 0.225])
])

# Load CIFAR-10 dataset
trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                     download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,
                                      shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                    download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=32,
                                     shuffle=False, num_workers=2)

class ResNet(nn.Module):
    def __init__(self):
        super().__init__()

        self.initconv = nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(16)
        self.conv1 = nn.Conv2d(in_channels=16, out_channels=16, kernel_size=3, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(16)
        self.conv2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=2, padding=1, bias=False)
        self.bn3 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=3, padding=1, bias=False)
        self.bn4 = nn.BatchNorm2d(32)
        self.conv4 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1, bias=False)
        self.bn5 = nn.BatchNorm2d(64)
        self.conv5 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1, bias=False)
        self.bn6 = nn.BatchNorm2d(64)
        self.conv6 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, padding=1, bias=False)
        self.bn7 = nn.BatchNorm2d(64)
        self.pool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(64, 10)
        self.softmax = nn.Softmax(dim=1)

        self.shortcut1 = nn.Conv2d(16, 32, kernel_size=1, stride=2, bias=False)
        self.shortcut2 = nn.Conv2d(32, 64, kernel_size=1, stride=2, bias=False)
        self.relu1 = nn.ReLU(inplace=False)
        self.relu2 = nn.ReLU(inplace=False)
        self.relu3 = nn.ReLU(inplace=False)
        self.relu4 = nn.ReLU(inplace=False)
        self.relu5 = nn.ReLU(inplace=False)
        self.relu6 = nn.ReLU(inplace=False)
        self.relu7 = nn.ReLU(inplace=False)
        self.relu8 = nn.ReLU(inplace=False)
        self.relu9 = nn.ReLU(inplace=False)
        self.relu10 = nn.ReLU(inplace=False)



    def forward(self, x):
      x = self.initconv(x)
      x = self.bn1(x)

      identity = self.shortcut1(x)
      x = self.conv1(x)
      x = self.bn2(x)
      x = self.relu1(x)
      x = self.conv2(x)
      x = self.bn3(x)
      x = self.relu2(x)
      x = x + identity
      x = self.relu3(x)


      identity = self.shortcut2(x)
      x = self.conv3(x)
      x = self.bn4(x)
      x = self.relu4(x)
      x = self.conv4(x)
      x = self.bn5(x)
      x = self.relu5(x)
      x = x + identity
      x = self.relu6(x)


      identity = x
      x = self.conv5(x)
      x = self.bn6(x)
      x = self.relu7(x)
      x = self.conv6(x)
      x = self.bn7(x)
      x = self.relu8(x)
      x = x + identity
      x = self.relu9(x)

      x = self.pool(x)

      x = torch.flatten(x, 1)
      x = self.fc(x)
      x = self.relu10(x)

      # x = self.softmax(x)

      return x

def train(model, epochs=100):
    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4)
    scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[30, 60, 90], gamma=0.1)

    train_losses = []
    test_losses = []

    for epoch in range(epochs):
        # Training phase
        model.train()
        running_loss = 0.0
        correct = 0
        total = 0

        for batch, targets in trainloader:
            batch, targets = batch.to(device), targets.to(device)

            optimizer.zero_grad()
            preds = model(batch)
            loss = loss_fn(preds, targets)
            loss.backward()
            optimizer.step()

            _, predicted = preds.max(1)
            total += targets.size(0)
            correct += predicted.eq(targets).sum().item()
            running_loss += loss.item()
            # print(loss.item())

        epoch_loss = running_loss / len(trainloader)
        epoch_acc = 100. * correct / total
        print(f'Epoch [{epoch+1}/{epochs}] Train Loss: {epoch_loss:.4f} Acc: {epoch_acc:.2f}%')

        train_losses.append(epoch_loss)

        model.eval()
        running_loss = 0.0
        correct = 0
        total = 0

        with torch.no_grad():
            for batch, targets in testloader:
                batch, targets = batch.to(device), targets.to(device)

                preds = model(batch)
                loss = loss_fn(preds, targets)

                _, predicted = preds.max(1)
                total += targets.size(0)
                correct += predicted.eq(targets).sum().item()
                running_loss += loss.item()

        test_loss = running_loss / len(testloader)
        test_acc = 100. * correct / total
        print(f'Test Loss: {test_loss:.4f} Acc: {test_acc:.2f}%')

        test_losses.append(test_loss)

        scheduler.step()

    return train_losses, test_losses

(train_losses, test_losses) = train(resnetmodel)

plt.figure(figsize=(10, 6))  # Creates a figure with specified size
plt.plot(train_losses)  # Plot the actual curve
plt.title('Training Loss Over Time')  # Add a title
plt.xlabel('Epoch')  # Label for x-axis
plt.ylabel('Loss')  # Label for y-axis
plt.grid(True)  # Add a grid for better readability
plt.show()  # Display the plot

plt.figure(figsize=(10, 6))  # Creates a figure with specified size
plt.plot(test_losses)  # Plot the actual curve
plt.title('Test Loss Over Time')  # Add a title
plt.xlabel('Epoch')  # Label for x-axis
plt.ylabel('Loss')  # Label for y-axis
plt.grid(True)  # Add a grid for better readability
plt.show()  # Display the plot

i = 15
print(testset.classes)
x = torch.tensor(testset.data)[i:i+1]
print(x.shape)
print(f"pred: {torch.argmax(resnetmodel(x.type(torch.float32)))}")
print(f"real: {testset.targets[i]}")
plt.imshow(x.squeeze())
